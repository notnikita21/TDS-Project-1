import requests
import pandas as pd

# Set your GitHub API token here
GITHUB_TOKEN = 'x'

# Function to fetch users in London with over 500 followers
def fetch_users():
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github.v3+json',
    }
    
    url = 'https://api.github.com/search/users'
    params = {
        'q': 'location:London followers:>500',
        'per_page': 100,
        'page': 1,
    }
    
    users = []
    
    while True:
        response = requests.get(url, headers=headers, params=params)
        
        if response.status_code != 200:
            print(f"Failed to fetch users: {response.status_code}, {response.json()}")
            return  # Exit if the request fails

        users_data = response.json()
        
        # Check if there are users returned
        if 'items' not in users_data:
            print("No users found.")
            break
        
        for user in users_data['items']:
            user_details = fetch_user_details(user['login'])
            if user_details is None:
                print(f"Failed to fetch details for user: {user['login']}")
                continue
            
            users.append({
                'login': user['login'],
                'name': user_details.get('name', ''),
                'company': (user_details.get('company', '') or '').strip('@').upper(),
                'location': user_details.get('location', ''),
                'email': user_details.get('email', ''),
                'hireable': user_details.get('hireable', ''),
                'bio': user_details.get('bio', ''),
                'public_repos': user_details.get('public_repos', 0),
                'followers': user_details.get('followers', 0),
                'following': user_details.get('following', 0),
                'created_at': user_details.get('created_at', ''),
                'repos_url': user_details.get('repos_url', ''),  # Add repos_url to the user data
            })

        # Check if we have fetched all users
        if len(users_data['items']) < params['per_page']:
            break  # Exit loop if there are no more users to fetch
        
        params['page'] += 1  # Increment page to fetch the next set of users

    # Convert to DataFrame and save to CSV
    users_df = pd.DataFrame(users)
    users_df.to_csv('users.csv', index=False)
    print(f"Saved users data to 'users.csv' with {len(users)} users.")

    # Fetch repositories for the users
    fetch_repositories(users)

# Function to fetch user details
def fetch_user_details(username):
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github.v3+json',
    }
    
    url = f'https://api.github.com/users/{username}'
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to fetch details for {username}: {response.status_code}, {response.json()}")
        return None

# Function to fetch repositories for each user
def fetch_repositories(users):
    repositories = []
    
    for user in users:
        repos_url = user.get('repos_url', '')  # Safely access repos_url
        if repos_url:  # Only fetch if repos_url is present
            response = requests.get(repos_url, headers={'Authorization': f'token {GITHUB_TOKEN}'})
            
            if response.status_code == 200:
                repos_data = response.json()
                for repo in repos_data:
                    repositories.append({
                        'login': user['login'],  # Add the user login
                        'full_name': repo.get('full_name', ''),
                        'created_at': repo.get('created_at', ''),
                        'stargazers_count': repo.get('stargazers_count', 0),
                        'watchers_count': repo.get('watchers_count', 0),
                        'language': repo.get('language', ''),
                        'has_projects': repo.get('has_projects', False),
                        'has_wiki': repo.get('has_wiki', False),
                        'license_name': repo.get('license', {}).get('name', '') if repo.get('license') else '',
                    })
            else:
                print(f"Failed to fetch repositories for {user['login']}: {response.status_code}")
    
    # Convert repositories list to DataFrame and save to CSV
    repositories_df = pd.DataFrame(repositories)
    repositories_df.to_csv('repositories.csv', index=False)
    print(f"Saved repositories data to 'repositories.csv' with {len(repositories)} repositories.")

# Main execution
if __name__ == '__main__':
    fetch_users()
